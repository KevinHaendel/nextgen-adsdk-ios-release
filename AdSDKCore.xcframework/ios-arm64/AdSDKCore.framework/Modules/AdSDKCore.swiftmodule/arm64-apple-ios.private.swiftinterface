// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -package-name com.adsdk.core -enable-bare-slash-regex -module-name AdSDKCore
@_exported import AdSDKCore
import Combine
import CommonCrypto
import CoreLocation
import CryptoKit
import EventKit
import Foundation
import Network
import Swift
import UIKit.UIApplication
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
public enum AdState {
  case loading
  case caching
  case readyToPresent(metadata: AdSDKCore.AdMetadata)
  case error(_: any Swift.Error)
}
final public class AdMetadata {
  final public var networkId: Swift.Int
  final public var campaignId: Swift.String
  final public var bannerId: Swift.String
  final public var adType: Swift.String
  final public var placement: AdSDKCore.AdPlacementType
  final public var adName: Swift.String?
  final public var aspectRatio: Swift.Double?
  final public var trackEvents: [AdSDKCore.TrackEventData]?
  final public var ext: [Swift.String : Any]
  final public var rendererMetadata: [Swift.String : Any]?
  public init(networkId: Swift.Int, campaignId: Swift.String, bannerId: Swift.String, adType: Swift.String, placement: AdSDKCore.AdPlacementType, adName: Swift.String?, aspectRatio: Swift.Double?, trackEvents: [AdSDKCore.TrackEventData]?, rawResponse: Foundation.Data, rendererMetadata: [Swift.String : Any]? = nil)
  @objc deinit
}
public struct DSA : Swift.Equatable {
  public let required: AdSDKCore.DSARequirement
  public let pubRender: AdSDKCore.DSAPubRender
  public let dataToPubs: AdSDKCore.DSADataToPubs
  public static func == (a: AdSDKCore.DSA, b: AdSDKCore.DSA) -> Swift.Bool
}
public enum DSARequirement : Swift.Int {
  case notRequired
  case supported
  case required
  case requiredForOnlinePlatform
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum DSAPubRender : Swift.Int {
  case cantRender
  case canRender
  case willRender
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum DSADataToPubs : Swift.Int {
  case ignoreTransparency
  case optionalSendTransparency
  case sendTransparency
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum AdPlacementType : Swift.String, Swift.Decodable, Swift.Equatable, Swift.Hashable, Swift.Sendable {
  case inline, interstitial
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol TargetURLHandler {
  func isValidURL(_ url: Foundation.URL) -> Swift.Bool
  func handleURL(_ url: Foundation.URL)
}
extension AdSDKCore.TargetURLHandler {
  public func isValidURL(_ url: Foundation.URL) -> Swift.Bool
}
public struct AdRequest : Swift.Equatable {
  public var contentUnit: Swift.UInt?
  public var learningTag: [Swift.String : Swift.String]?
  public let profile: [Swift.String : Swift.String]?
  public let keywords: [Swift.String]?
  public let window: Swift.UInt32?
  public let timeoutAfterSeconds: Swift.Int
  public let gdprPd: Swift.Bool?
  public let campaignId: Swift.String?
  public let bannerId: Swift.String?
  public var isSHBEnabled: Swift.Bool? {
    get
  }
  public var dsa: AdSDKCore.DSA? {
    get
  }
  public init(contentUnit: Swift.UInt, profile: [Swift.String : Swift.String]? = nil, keywords: [Swift.String]? = nil, window: Swift.UInt32? = nil, timeoutAfterSeconds: Swift.Int? = nil, gdprPd: Swift.Bool? = nil, campaignId: Swift.String? = nil, bannerId: Swift.String? = nil, isSHBEnabled: Swift.Bool? = nil, dsa: AdSDKCore.DSA? = nil)
  public init(learningTag: [Swift.String : Swift.String], profile: [Swift.String : Swift.String]? = nil, keywords: [Swift.String]? = nil, window: Swift.UInt32? = nil, timeoutAfterSeconds: Swift.Int? = nil, gdprPd: Swift.Bool? = nil, campaignId: Swift.String? = nil, bannerId: Swift.String? = nil, isSHBEnabled: Swift.Bool? = nil, dsa: AdSDKCore.DSA? = nil)
  public static func == (a: AdSDKCore.AdRequest, b: AdSDKCore.AdRequest) -> Swift.Bool
}
public protocol Advertisement : AnyObject {
  var metadata: AdSDKCore.AdMetadata? { get }
  var controller: (any AdSDKCore.AdController)? { get }
  var state: AdSDKCore.AdState { get }
  var eventPublisher: Combine.AnyPublisher<AdSDKCore.AdEvent, Swift.Never> { get }
  var eventStream: _Concurrency.AsyncStream<AdSDKCore.AdEvent> { get }
  var statePublisher: Combine.AnyPublisher<AdSDKCore.AdState, Swift.Never> { get }
  var stateStream: _Concurrency.AsyncStream<AdSDKCore.AdState> { get }
  func reload()
  func performTapEvent(_ event: AdSDKCore.TapEvent)
  func _layoutDidChange(visibility: Swift.Int)
}
public enum AdEvent {
  case tap(url: Foundation.URL, metadata: AdSDKCore.AdMetadata)
  case impression(url: Foundation.URL, metadata: AdSDKCore.AdMetadata)
  case viewable(percentage: AdSDKCore.AdVisibilityPercentage, url: Foundation.URL, metadata: AdSDKCore.AdMetadata)
  case showingAsset(id: Swift.String, url: Foundation.URL, metadata: AdSDKCore.AdMetadata)
  case unloadRequest
  case customRendererEvent(name: Swift.String, url: Foundation.URL?, info: Swift.String?, metadata: AdSDKCore.AdMetadata)
  case error(_: AdSDKCore.AdError, eventName: Swift.String)
}
@_hasMissingDesignatedInitializers final public class AdService {
  final public let networkID: Swift.UInt
  final public var isLoggingEnabled: Swift.Bool {
    get
    set
  }
  @objc deinit
}
extension AdSDKCore.AdService {
  final public func registerRenderer<T>(_ renderer: T.Type, forName name: Swift.String) where T : AdSDKCore.AdRenderer
  final public func unregisterRenderer(forName name: Swift.String)
  final public func makeAdvertisement(request: AdSDKCore.AdRequest, placementType: AdSDKCore.AdPlacementType = .inline, targetURLHandler: (any AdSDKCore.TargetURLHandler)? = nil) -> any AdSDKCore.Advertisement
  @available(*, deprecated, renamed: "setAdRequestGlobalParameter", message: "The method will be removed in the future. Please use the updated method.")
  final public func setGlobalParameter<T>(_ keyPath: Swift.WritableKeyPath<AdSDKCore.AdRequestGlobalParameters, T?>, _ value: T?)
  @available(*, deprecated, renamed: "removeAdRequestGlobalParameter", message: "The method will be removed in the future. Please use the updated method.")
  final public func removeGlobalParameter<T>(_ keyPath: Swift.WritableKeyPath<AdSDKCore.AdRequestGlobalParameters, T?>)
  final public func setAdRequestGlobalParameter<T>(_ keyPath: Swift.WritableKeyPath<AdSDKCore.AdRequestGlobalParameters, T?>, _ value: T?)
  final public func removeAdRequestGlobalParameter<T>(_ keyPath: Swift.WritableKeyPath<AdSDKCore.AdRequestGlobalParameters, T?>)
  final public func setTrackingGlobalParameter<T>(_ keyPath: Swift.WritableKeyPath<AdSDKCore.TrackingGlobalParameters, T?>, _ value: T?)
  final public func removeTrackingGlobalParameter<T>(_ keyPath: Swift.WritableKeyPath<AdSDKCore.TrackingGlobalParameters, T?>)
  final public func tagUser(request: AdSDKCore.TagRequest) -> Combine.AnyPublisher<Swift.Never, AdSDKCore.AdError>
  #if compiler(>=5.3) && $AsyncAwait
  final public func tagUser(request: AdSDKCore.TagRequest) async throws
  #endif
  final public func trackRequest(_ request: AdSDKCore.TrackRequest) -> Combine.AnyPublisher<Swift.Never, AdSDKCore.AdError>
  #if compiler(>=5.3) && $AsyncAwait
  final public func trackRequest(_ request: AdSDKCore.TrackRequest) async throws
  #endif
  final public func setCacheSize(_ size: Swift.UInt8)
  final public func flushCache()
  final public func getAdSDKCoreVersion() -> Swift.String
}
public struct TrackEventData : Swift.Decodable, Swift.Equatable, Swift.Hashable {
  public let event: AdSDKCore.TrackEvent
  public let url: Foundation.URL
  public init(from decoder: any Swift.Decoder) throws
  public static func == (a: AdSDKCore.TrackEventData, b: AdSDKCore.TrackEventData) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TrackRequest : Swift.Equatable {
  public let landingpageId: Swift.UInt16
  public let trackingspotId: Swift.UInt16
  public let orderId: Swift.String?
  public let price: Swift.Float?
  public let total: Swift.Float?
  public let quantity: Swift.UInt32?
  public let itemNumber: Swift.String?
  public let description: Swift.String?
  public init(landingpageId: Swift.UInt16, trackingspotId: Swift.UInt16, orderId: Swift.String? = nil, price: Swift.Float? = nil, total: Swift.Float? = nil, quantity: Swift.UInt32? = nil, itemNumber: Swift.String? = nil, description: Swift.String? = nil)
  public static func == (a: AdSDKCore.TrackRequest, b: AdSDKCore.TrackRequest) -> Swift.Bool
}
public enum AdControllerEvent : Swift.Sendable, Swift.Equatable {
  case tapAsset(id: Swift.String)
  case tap
  case silentTap(_: Foundation.URL)
  case tapURL(_: AdSDKCore.TapURL)
  case showingAsset(id: Swift.String)
  case unloadRequest
  case customRendererEvent(name: Swift.String, url: Foundation.URL? = nil, info: Swift.String? = nil)
  public static func == (a: AdSDKCore.AdControllerEvent, b: AdSDKCore.AdControllerEvent) -> Swift.Bool
}
public enum AdError : Swift.Error, Swift.Equatable {
  case reference
  case decoding
  case unknownRenderer
  case mismatchPlacementType
  case clientIssue
  case serverIssue
  case unknownStatusCode
  case badURL
  case timedOut
  case hostConnectionIssue
  case tooManyRedirects
  case resourceUnavailable
  case reachabilityUnavailable
  case unspecifiedNetworkError
  case serverErrorResponse(message: Swift.String)
  case bannerNotFound
  case invalidContentType
  case incorrectURL(_: Foundation.URL)
  case inabilityToProcessEvent
  case assetWithIdNotFound(assetId: Swift.String)
  case tapEventHandlingInProcess
  public static func == (a: AdSDKCore.AdError, b: AdSDKCore.AdError) -> Swift.Bool
}
public protocol AdRenderer {
  associatedtype Controller : AdSDKCore.AdController where Self == Self.Controller.Renderer
  init(controller: Self.Controller)
}
public struct TapURL : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  public let isURLWithRedirects: Swift.Bool
  public let url: Foundation.URL
  public let rawURL: Swift.String
  public init(_ rawURL: Swift.String) throws
  public init(_ url: Foundation.URL)
  public static func == (a: AdSDKCore.TapURL, b: AdSDKCore.TapURL) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AdVisibilityPercentage : Swift.Int, Swift.CaseIterable, Swift.Equatable {
  case one
  case fifty
  case oneHundred
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [AdSDKCore.AdVisibilityPercentage]
  public typealias RawValue = Swift.Int
  public static var allCases: [AdSDKCore.AdVisibilityPercentage] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public struct TagRequest : Swift.Equatable {
  public init(_ tags: [AdSDKCore.TagRequest.Tag])
  public static func == (a: AdSDKCore.TagRequest, b: AdSDKCore.TagRequest) -> Swift.Bool
}
extension AdSDKCore.TagRequest {
  public struct Tag : Swift.Equatable {
    public init(key: Swift.String, subkey: Swift.String, value: Swift.String? = nil)
    public static func == (a: AdSDKCore.TagRequest.Tag, b: AdSDKCore.TagRequest.Tag) -> Swift.Bool
  }
}
public enum TrackEvent : Swift.Hashable, Swift.Equatable {
  case impression
  case viewable(percentage: AdSDKCore.AdVisibilityPercentage)
  case showingAsset(id: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AdSDKCore.TrackEvent, b: AdSDKCore.TrackEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum TapEvent : Swift.Hashable, Swift.Equatable {
  case tap
  case silentTap(_: Foundation.URL)
  case tapURL(_: AdSDKCore.TapURL)
  case tapAsset(id: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AdSDKCore.TapEvent, b: AdSDKCore.TapEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AdController : AnyObject {
  associatedtype Renderer : AdSDKCore.AdRenderer where Self == Self.Renderer.Controller
  var state: Combine.AnyPublisher<AdSDKCore.AdControllerState, Swift.Never> { get }
  var event: Combine.AnyPublisher<AdSDKCore.AdControllerEvent, Swift.Never> { get }
  init(_ assetRepository: any AdSDKCore.AssetRepository)
  func update(_ data: Foundation.Data, _ metadata: AdSDKCore.AdMetadata)
  func layoutDidChange(visibility: Swift.Int)
}
extension AdSDKCore.AdController {
  public func layoutDidChange(visibility: Swift.Int)
}
@_hasMissingDesignatedInitializers public class GlobalParameters {
  public var gdpr: AdSDKCore.GlobalParameters.GDPR?
  public var externalUID: AdSDKCore.GlobalParameters.ExternalUID?
  public var isOptOutEnabled: Swift.Bool?
  public var userIds: [AdSDKCore.GlobalParameters.UserIdType]?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AdRequestGlobalParameters : AdSDKCore.GlobalParameters {
  final public var isSHBEnabled: Swift.Bool?
  final public var dsa: AdSDKCore.DSA?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TrackingGlobalParameters : AdSDKCore.GlobalParameters {
  @objc deinit
}
extension AdSDKCore.GlobalParameters {
  public struct GDPR : Swift.Equatable {
    public init(consent: Swift.String, isRulesEnabled: Swift.Bool? = nil)
    public static func == (a: AdSDKCore.GlobalParameters.GDPR, b: AdSDKCore.GlobalParameters.GDPR) -> Swift.Bool
  }
  public struct ExternalUID : Swift.Equatable {
    public init(uid: Swift.String, isStable: Swift.Bool? = nil)
    public static func == (a: AdSDKCore.GlobalParameters.ExternalUID, b: AdSDKCore.GlobalParameters.ExternalUID) -> Swift.Bool
  }
  public enum UserIdType : Swift.Hashable, Swift.Equatable {
    case idfa(id: Swift.String)
    case aaid(id: Swift.String)
    case netid(id: Swift.String)
    case adserver(id: Swift.String)
    case liveramp(id: Swift.String)
    case criteo(id: Swift.String)
    case id5Sync(id: Swift.String)
    case pubcid(id: Swift.String)
    case ppid(id: Swift.String)
    case dforce(id: Swift.String)
    case ylid(id: Swift.String)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: AdSDKCore.GlobalParameters.UserIdType, b: AdSDKCore.GlobalParameters.UserIdType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public enum AdControllerState : AdSDKCore.AssetRepositoryState, Swift.Sendable {
  case caching
  case readyToPresent
  case error(_: any Swift.Error)
}
public protocol AssetRepositoryState {
  static var caching: Self { get }
}
public struct AssetRequest : Swift.Equatable {
  public let id: Swift.String
  public let url: Foundation.URL
  public init(id: Swift.String, url: Foundation.URL)
  public static func == (a: AdSDKCore.AssetRequest, b: AdSDKCore.AssetRequest) -> Swift.Bool
}
public struct AssetResult : Swift.Equatable {
  public let id: Swift.String
  public let url: Foundation.URL
  public let data: Foundation.Data
  public let path: Foundation.URL?
  public init(id: Swift.String, url: Foundation.URL, data: Foundation.Data, path: Foundation.URL? = nil)
  public static func == (a: AdSDKCore.AssetResult, b: AdSDKCore.AssetResult) -> Swift.Bool
}
public protocol AssetRepository : AnyObject {
  func loadAssets<T>(_ assets: [AdSDKCore.AssetRequest], stateSubject: Combine.PassthroughSubject<T, Swift.Never>) -> Combine.AnyPublisher<[AdSDKCore.AssetResult], AdSDKCore.AdError> where T : AdSDKCore.AssetRepositoryState
  func getCachedAsset(connectedURL: Foundation.URL) -> (Foundation.Data, Foundation.URL)?
  @discardableResult
  func setAssetIntoCache(_ data: Foundation.Data, connectedURL: Foundation.URL) -> Foundation.URL?
}
extension AdSDKCore.DSARequirement : Swift.Equatable {}
extension AdSDKCore.DSARequirement : Swift.Hashable {}
extension AdSDKCore.DSARequirement : Swift.RawRepresentable {}
extension AdSDKCore.DSAPubRender : Swift.Equatable {}
extension AdSDKCore.DSAPubRender : Swift.Hashable {}
extension AdSDKCore.DSAPubRender : Swift.RawRepresentable {}
extension AdSDKCore.DSADataToPubs : Swift.Equatable {}
extension AdSDKCore.DSADataToPubs : Swift.Hashable {}
extension AdSDKCore.DSADataToPubs : Swift.RawRepresentable {}
extension AdSDKCore.AdPlacementType : Swift.RawRepresentable {}
extension AdSDKCore.AdVisibilityPercentage : Swift.Hashable {}
extension AdSDKCore.AdVisibilityPercentage : Swift.RawRepresentable {}
